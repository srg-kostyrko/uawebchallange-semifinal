(module "stream" ()
  (all
    (define (create initial)
      (all
        (set s
          (hash-map
            (has-value 0)
            (value ())
            (values (array))
            (listeners (array))
          )
        )
        (if (not (? initial))
          (set-value s initial)
        )
        (s)
      )
    )
    (define (create-dependent dependencies fn)
      (all
        (set s (create))
        (.= "fn" fn s)
        (.= "dependencies" dependencies s)
        (array-map
          (lambda (dep)
            (all
              (push s (. "listeners" dep))
            )
          )
          dependencies
        )
        (s)
      )
    )
    (define (get s)
      (. "value" s)
    )
    (define (get-all s)
      (. "values" s)
    )
    (define (set-value s value)
      (all
        (.= "value" value s)
        (.= "has-value" 1 s)
        (push value (. "values" s))
        (update-dependencies s)
      )
    )
    (define (callback s)
      (cb
        (lambda (value)
          (set-value s value)
        )
      )
    )
    (define (update-dependencies s)
      (all
        (array-map
          (lambda (dep)
            (update dep s)
          )
          (. "listeners" s)
        )
      )
    )
    (define (update s changed)
      (all
        (set result-value (apply (. "fn" s) (array-merge (. "fnArgs" s) (array s changed))))
        (if (not (? result-value))
          (set-value s result-value)
        )
      )
    )

    (define (combine fn streams force-update)
      (all
        (set s (create-dependent streams fn))
        (.= "fnArgs" streams s)
        (if (not (? force-update))
          (update s)
        )
        (s)
      )
    )
    (define (map fn stream)
      (all
        (set s
          (combine
            (lambda (s)
              (apply fn (array (get s)))
            )
            (array stream)
          )
        )
        (update s)
        (s)
      )
    )
    (define (scan fn acc stream)
      (all
        (set vs
          (combine
            (lambda (s self)
              (all
                (set-value self (apply fn (array (or (get self) acc) (get s))))
                ()
              )
            )
            (array stream)
          )
        )
        (set-value vs acc)
        (update vs)
        (vs)
      )
    )
    (define (filter fn stream)
      (all
        (set s
          (combine
            (lambda (s self)
              (all
                (if (apply fn (array (get s)))
                  (set-value self (get s))
                )
                ()
              )
            )
            (array stream)
          )
        )
        (update s)
        (s)
      )
    )
    (define (merge s1 s2)
      (all
        (set s
          (combine
            (lambda (s1 s2 self changed)
              (all
                (if (not (? changed))
                  (set-value self (get changed))
                  (if (. "has-value" s1)
                    (set-value self (get s1))
                    (if (. "has-value" s2)
                      (set-value self (get s2))
                    )
                  )
                )
                ()
              )
            )
            (array s1 s2)
          )
        )
        (update s)
        (s)
      )
    )
  )
)

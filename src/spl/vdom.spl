(module "vdom" (v-node dom stream)
  (all
    (set boolean-attrs
      (hash-map
        (autofocus 1)
        (autoplay 1)
        (checked 1)
        (disabled 1)
        (muted 1)
        (readonly 1)
        (required 1)
      )
    )
    (define (patch old-v-node v-node)
      (all
        (if (same-v-node old-v-node v-node)
          (patch-v-node old-v-node v-node)
          (all
            (set element (. "elm" old-v-node))
            (set parent (dom:parent element))
            (create-element v-node)
            (if (not (? parent))
              (all
                (dom:insert-before
                  parent
                  (. "elm" v-node)
                  (dom:sibling element)
                )
                (remove-v-node old-v-node)
              )
            )
          )
        )
        (v-node)
      )
    )
    (define (remove-v-node node)
      (dom:remove-child
        (dom:parent (. "elm" node))
        (. "elm" node)
      )
    )
    (define (add-v-node parent v-node before)
      (dom:insert-before
        parent
        (create-element v-node)
        before
      )
    )
    (define (same-v-node a b)
      (all
        (if (= (. "key" a) (. "key" b))
          (1)
          (0)
        )
      )
    )
    (define (create-element v-node)
      (all
        (set data (. "data" v-node))
        (if (not (? (. "tag" v-node)))
          (all
            (set elm (dom:element (. "tag" v-node)))
            (.= "className" (. "cls" v-node) elm)
            (array-map
              (lambda (child) (dom:append-child elm (create-element child)))
              (. "children" v-node)
            )
          )
          (all
            (set elm (dom:element "span"))
            (dom:append-child elm (dom:text-node (. "cls" v-node)))
          )
        )
        (.= "elm" elm v-node)
        (update-attr () v-node)
        (update-style () v-node)
        (update-event-listeners () v-node)
        (elm)
      )
    )
    (define (update-children parent old-children children)
      (all
        (array-map2
          (lambda (old-child child)
            (all
              (if (not (? child))
                (.= "parent" parent child)
              )
              (patch-v-node old-child child)
            )
          )
          old-children
          children
        )
      )
    )
    (define (patch-v-node old-v-node v-node)
      (all
        (if (not (same old-v-node v-node))
          (if (same-v-node old-v-node v-node)
            (all
              (set old-children (. "children" old-v-node))
              (set children (. "children" v-node))
              (.= "elm" (. "elm" old-v-node) v-node)
              (set elm (. "elm" v-node))
              (if (not (? (. "tag" v-node)))
                (all
                  (if (not (same (. "cls" v-node) (. "cls" old-v-node)))
                    (.= "className" (. "cls" v-node) elm)
                  )
                  (update-attr old-v-node v-node)
                  (update-style old-v-node v-node)
                  (update-event-listeners old-v-node v-node)
                  (if (and (not (? old-children)) (not (? children)))
                    (if (not (same old-children children))
                      (update-children old-v-node old-children children)
                    )
                    (if (not (? children))
                      (array-map
                        (lambda (child) (add-v-node elm child))
                        children
                      )
                      (if (not (? old-children))
                        (array-map
                          (lambda (child) (remove-v-node child))
                          old-children
                        )
                      )
                    )
                  )
                )
                (if (not (same (. "cls" old-v-node) (. "cls" v-node)))
                  (all
                    (.= "elm" (. "elm" old-v-node) v-node)
                    (dom:set-text (. "elm" v-node) (. "cls" v-node))
                  )
                )
              )
            )
            (all
              (if (not (? v-node))
                (if (not (? old-v-node))
                  (dom:insert-before
                    (dom:parent (. "elm" old-v-node))
                    (create-element v-node)
                    (. "elm" old-v-node)
                  )
                  (dom:append-child (. "elm" (. "parent" v-node)) (create-element v-node))
                )
              )
              (remove-v-node old-v-node)
            )
          )
        )
      )
    )
    (define (update-attr old-v-node v-node)
      (all
        (set elm (. "elm" v-node))
        (set old-attrs (or (. "attrs" (. "data" old-v-node)) (hash-map)))
        (set attrs (or (. "attrs" (. "data" v-node)) (hash-map)))        (array-map
          (lambda (key)
            (all
              (set current (. key attrs))
              (set old (. key old-attrs))
              (if (not (same old current))
                (if (and (not current) (. key boolean-attrs))
                  (.call "removeAttribute" elm key)
                  (.call "setAttribute" elm key current)
                )
              )
            )
          )
          (hash-keys attrs)
        )
        (array-map
          (lambda (key)
            (if (? (. key attrs))
              (.call "removeAttribute" elm key)
            )
          )
          (hash-keys old-attrs)
        )
      )
    )
    (define (update-style old-v-node v-node)
      (all
        (set elm (. "elm" v-node))
        (set elm-style (. "style" elm))
        (set old-style (or (. "style" (. "data" old-v-node) (hash-map))))
        (set style (or (. "style" (. "data" v-node) (hash-map))))
        (array-map
          (lambda (name)
            (all
              (if (not (. name style))
                (.= name "" elm-style)
              )
            )
          )
          (hash-keys old-style)
        )
        (array-map
          (lambda (name)
            (all
              (set current (. name style))
              (if (not (same current (. name old-style)))
                (.= name current elm-style)
              )
            )
          )
          (hash-keys style)
        )
      )
    )
    (define (update-event-listeners old-v-node v-node)
      (all
        (set elm (. "elm" v-node))
        (set on (. "on" (. "data" v-node)))
        (set old-on (or (. "on" (. "data" old-v-node)) (hash-map)))
        (if (not (? on))
          (all
            (array-map
              (lambda (name)
                (all
                  (set current (. name on))
                  (set old (. name old-on))
                  (if (? old)
                    (all
                      (set listener
                        (stream:callback current)
                      )
                      (.= "listener" listener on)
                      (.call "addEventListener" elm name listener)
                    )
                    (all
                      (set old-listener (. "listener" old-on))
                      (.call "removeEventListener" elm name old-listener)
                      (set listener
                        (stream:callback current)
                      )
                      (.= "listener" listener on)
                      (.call "addEventListener" elm name listener)
                    )
                  )
                )
              )
              (hash-keys on)
            )
          )
        )
      )
    )
  )
)
